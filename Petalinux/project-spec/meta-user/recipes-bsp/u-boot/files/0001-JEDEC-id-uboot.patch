From c97cb19bd36d3ee556c409ea3d06e50889f9a998 Mon Sep 17 00:00:00 2001
From: ArtisticZhao <hit.yuhao.zhao@gmail.com>
Date: Fri, 26 Nov 2021 16:23:57 +0800
Subject: [PATCH 1/3] =?UTF-8?q?=E6=B7=BB=E5=8A=A0=E5=81=87JEDEC=20id=20?=
 =?UTF-8?q?=E9=AA=97=E8=BF=87uboot=E8=BF=9B=E8=A1=8C=E6=8C=82=E8=BD=BD?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 drivers/mtd/spi/spi_flash.c     |  11 +-
 drivers/mtd/spi/spi_flash_ids.c |   1 +
 include/configs/platform-auto.h | 176 ++++++++++++++++++++++++++++++++
 include/configs/platform-top.h  |  24 +++++
 4 files changed, 211 insertions(+), 1 deletion(-)
 create mode 100755 include/configs/platform-auto.h
 create mode 100755 include/configs/platform-top.h

diff --git a/drivers/mtd/spi/spi_flash.c b/drivers/mtd/spi/spi_flash.c
index ac71fbb..6793320 100644
--- a/drivers/mtd/spi/spi_flash.c
+++ b/drivers/mtd/spi/spi_flash.c
@@ -19,7 +19,7 @@
 #include <dma.h>
 
 #include "sf_internal.h"
-
+#define DEBUG
 static void spi_flash_addr(u32 addr, u8 *cmd, u8 four_byte)
 {
 	/* cmd[0] is actual command */
@@ -660,6 +660,7 @@ void __weak spi_flash_copy_mmap(void *data, void *offset, size_t len)
 int spi_flash_cmd_read_ops(struct spi_flash *flash, u32 offset,
 		size_t len, void *data)
 {
+	u8 i;
 	struct spi_slave *spi = flash->spi;
 	u8 cmdsz;
 	u32 remain_len, read_len, read_addr;
@@ -674,6 +675,7 @@ int spi_flash_cmd_read_ops(struct spi_flash *flash, u32 offset,
 	void *tempbuf = NULL;
 	size_t length = len;
 #endif
+	printf("in spi_flash_cmd_read_ops, offset: %x, len: %x", offset, len);
 
 #ifdef CONFIG_SF_DUAL_FLASH
 	/*
@@ -764,6 +766,13 @@ int spi_flash_cmd_read_ops(struct spi_flash *flash, u32 offset,
 		if (flash->dual_flash == SF_DUAL_PARALLEL_FLASH)
 			flash->spi->flags |= SPI_XFER_STRIPE;
 #endif
+		printf("spi_flash_read_common, cmd: ");
+		for (i=0;i<cmdsz; i++){
+			printf("%x ", cmd[i]);
+		}
+		printf("\n");
+		printf("read_len: %d\n", read_len);
+
 		ret = spi_flash_read_common(flash, cmd, cmdsz, data, read_len);
 		if (ret < 0) {
 			debug("SF: read failed\n");
diff --git a/drivers/mtd/spi/spi_flash_ids.c b/drivers/mtd/spi/spi_flash_ids.c
index e63cad8..5c8ff52 100644
--- a/drivers/mtd/spi/spi_flash_ids.c
+++ b/drivers/mtd/spi/spi_flash_ids.c
@@ -43,6 +43,7 @@
 		.flags = (_flags),
 
 const struct spi_flash_info spi_flash_ids[] = {
+	{"513fakeqspi",	   INFO(0xaa0102, 0x0, 128 * 1024, 2048, SECT_4K) },
 #ifdef CONFIG_SPI_FLASH_ATMEL		/* ATMEL */
 	{"at45db011d",	   INFO(0x1f2200, 0x0, 64 * 1024,     4, SECT_4K) },
 	{"at45db021d",	   INFO(0x1f2300, 0x0, 64 * 1024,     8, SECT_4K) },
diff --git a/include/configs/platform-auto.h b/include/configs/platform-auto.h
new file mode 100755
index 0000000..3411030
--- /dev/null
+++ b/include/configs/platform-auto.h
@@ -0,0 +1,176 @@
+/*
+ * This file is auto-generated by PetaLinux SDK 
+ * DO NOT MODIFY this file, the modification will not persist
+ */
+
+#ifndef __PLNX_CONFIG_H
+#define __PLNX_CONFIG_H
+
+/* The following table includes the supported baudrates */
+
+
+#define CONFIG_SYS_BAUDRATE_TABLE  { 4800, 9600, 19200, 38400, 57600, 115200 }
+
+
+
+/* processor - psu_cortexa53_0 */
+#define CONFIG_CPU_ARMV8
+#define CONFIG_CLOCKS
+#define CONFIG_REMAKE_ELF
+#define CONFIG_BOARD_EARLY_INIT_F
+#define CONFIG_ARM_DCC
+#define CONFIG_MP
+
+/* main_memory - psu_ddr_0 */
+
+/* uart - psu_uart_0 */
+#define PSSERIAL0	"psserial0=setenv stdout ttyPS0;setenv stdin ttyPS0\0"
+#define SERIAL_MULTI	"serial=setenv stdout serial;setenv stdin serial\0"
+#define CONSOLE_ARG	"console=console=ttyPS0,115200\0"
+#define SERIAL_MULTI  "serial=setenv stdout serial;setenv stdin serial\0"
+#define CONFIG_BAUDRATE	115200
+
+/* ethernet - psu_ethernet_0 */
+#define CONFIG_SYS_FAULT_ECHO_LINK_DOWN
+#define PHY_ANEG_TIMEOUT 20000
+#define CONFIG_MII
+#define CONFIG_NET_MULTI
+#define CONFIG_NETCONSOLE	1
+#define CONFIG_SERVERIP	172.223.2.1
+#define CONFIG_IPADDR
+
+/* spi_flash - psu_qspi_0 */
+#define XILINX_PS8_QSPI_CLK_FREQ_HZ	187498123
+#define CONFIG_SF_DEFAULT_SPEED   (XILINX_PS8_QSPI_CLK_FREQ_HZ / 4)
+#define CONFIG_MTD_PARTITIONS
+#define CONFIG_SPI_FLASH_MTD
+
+/* sdio - psu_sd_0 */
+#define CONFIG_SUPPORT_EMMC_BOOT
+
+/* rtc - psu_rtc */
+
+/* zynq_ultra_ps_e_0 */
+#define COUNTER_FREQUENCY 100000000
+
+/* intc - psu_acpu_gic */
+#define ACPU_GIC_BASEADDR	0xF9010000
+#define CONFIG_GICV2	1
+#define GICD_BASE	(ACPU_GIC_BASEADDR)
+#define GICC_BASE (ACPU_GIC_BASEADDR + 0x10000)
+
+/* FPGA */
+
+/* Memory testing handling */
+#define CONFIG_SYS_MEMTEST_START	0x0
+#define CONFIG_SYS_MEMTEST_END	(0x0 + 0x1000)
+#define CONFIG_SYS_LOAD_ADDR	(0x0 + 0x100000) /* default load address */
+#define CONFIG_SYS_INIT_SP_ADDR	(CONFIG_SYS_LOAD_ADDR - GENERATED_GBL_DATA_SIZE)
+#define CONFIG_NR_DRAM_BANKS	2
+
+/* Size of malloc() pool */
+#define SIZE	0x2000000
+#define CONFIG_SYS_MALLOC_LEN	SIZE
+
+
+/* BOOTP options */
+#define CONFIG_BOOTP_SERVERIP
+#define CONFIG_BOOTP_BOOTFILESIZE
+#define CONFIG_BOOTP_BOOTPATH
+#define CONFIG_BOOTP_GATEWAY
+#define CONFIG_BOOTP_HOSTNAME
+#define CONFIG_BOOTP_MAY_FAIL
+#define CONFIG_BOOTP_DNS
+#define CONFIG_BOOTP_SUBNETMASK
+#define CONFIG_BOOTP_PXE
+
+/*Command line configuration.*/
+#define CONFIG_CMDLINE_EDITING
+#define CONFIG_AUTO_COMPLETE
+
+#define CONFIG_IMAGE_FORMAT_LEGACY
+#define CONFIG_SUPPORT_RAW_INITRD
+
+/* Miscellaneous configurable options */
+#define CONFIG_SYS_CBSIZE	2048/* Console I/O Buffer Size      */
+#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
+
+/* Use the HUSH parser */
+#define CONFIG_SYS_PROMPT_HUSH_PS2 "> "
+
+#define CONFIG_ENV_VARS_UBOOT_CONFIG
+#define CONFIG_ENV_OVERWRITE	/* Allow to overwrite the u-boot environment variables */
+
+#define CONFIG_LMB
+
+/* FDT support */
+#define CONFIG_DISPLAY_BOARDINFO_LATE
+
+
+/* Boot Argument Buffer Size */
+#define CONFIG_SYS_MAXARGS      64      /* max number of command args */
+#define CONFIG_SYS_LONGHELP
+
+/* Initial memory map for Linux */
+#define CONFIG_SYS_BOOTMAPSZ 0x8000000
+
+/* Environment settings*/
+#define CONFIG_ENV_SPI_MAX_HZ	30000000
+#define CONFIG_ENV_OFFSET	0x100000
+#define CONFIG_ENV_SIZE	0x40000
+#define CONFIG_ENV_SECT_SIZE	0x20000
+
+/* PREBOOT */
+#define CONFIG_PREBOOT	"echo U-BOOT for zu513_linux;setenv preboot; echo; dhcp"
+
+/* Extra U-Boot Env settings */
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	SERIAL_MULTI \ 
+	CONSOLE_ARG \ 
+	PSSERIAL0 \ 
+	"nc=setenv stdout nc;setenv stdin nc;\0" \ 
+	"ethaddr=00:0a:35:00:22:01\0" \
+	"autoload=no\0" \ 
+	"sdbootdev=0\0" \ 
+	"clobstart=0x10000000\0" \ 
+	"netstart=0x10000000\0" \ 
+	"dtbnetstart=0x23fff000\0" \ 
+	"loadaddr=0x10000000\0" \ 
+	"bootsize=0x100000\0" \ 
+	"bootstart=0x0\0" \ 
+	"boot_img=BOOT.BIN\0" \ 
+	"load_boot=tftpboot ${clobstart} ${boot_img}\0" \ 
+	"update_boot=setenv img boot; setenv psize ${bootsize}; setenv installcmd \"install_boot\"; run load_boot test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_boot=sf probe 0 && sf erase ${bootstart} ${bootsize} && " \ 
+		"sf write ${clobstart} ${bootstart} ${filesize}\0" \ 
+	"bootenvsize=0x40000\0" \ 
+	"bootenvstart=0x100000\0" \ 
+	"eraseenv=sf probe 0 && sf erase ${bootenvstart} ${bootenvsize}\0" \ 
+	"jffs2_img=rootfs.jffs2\0" \ 
+	"load_jffs2=tftpboot ${clobstart} ${jffs2_img}\0" \ 
+	"update_jffs2=setenv img jffs2; setenv psize ${jffs2size}; setenv installcmd \"install_jffs2\"; run load_jffs2 test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_jffs2=sf probe 0 && sf erase ${jffs2start} ${jffs2size} && " \ 
+		"sf write ${clobstart} ${jffs2start} ${filesize}\0" \ 
+	"kernelsize=0x1600000\0" \ 
+	"kernelstart=0x140000\0" \ 
+	"kernel_img=image.ub\0" \ 
+	"load_kernel=tftpboot ${clobstart} ${kernel_img}\0" \ 
+	"update_kernel=setenv img kernel; setenv psize ${kernelsize}; setenv installcmd \"install_kernel\"; run load_kernel test_crc; setenv img; setenv psize; setenv installcmd\0" \ 
+	"install_kernel=sf probe 0 && sf erase ${kernelstart} ${kernelsize} && " \ 
+		"sf write ${clobstart} ${kernelstart} ${filesize}\0" \ 
+	"cp_kernel2ram=sf probe 0 && sf read ${netstart} ${kernelstart} ${kernelsize}\0" \ 
+	"dtb_img=system.dtb\0" \ 
+	"load_dtb=tftpboot ${clobstart} ${dtb_img}\0" \ 
+	"update_dtb=setenv img dtb; setenv psize ${dtbsize}; setenv installcmd \"install_dtb\"; run load_dtb test_img; setenv img; setenv psize; setenv installcmd\0" \ 
+	"fault=echo ${img} image size is greater than allocated place - partition ${img} is NOT UPDATED\0" \ 
+	"test_crc=if imi ${clobstart}; then run test_img; else echo ${img} Bad CRC - ${img} is NOT UPDATED; fi\0" \ 
+	"test_img=setenv var \"if test ${filesize} -gt ${psize}\\; then run fault\\; else run ${installcmd}\\; fi\"; run var; setenv var\0" \ 
+	"netboot=tftpboot ${netstart} ${kernel_img} && bootm\0" \ 
+	"default_bootcmd=run cp_kernel2ram && bootm ${netstart}\0" \ 
+""
+
+/* BOOTCOMMAND */
+#define CONFIG_BOOTCOMMAND	"run default_bootcmd"
+
+#endif /* __PLNX_CONFIG_H */
diff --git a/include/configs/platform-top.h b/include/configs/platform-top.h
new file mode 100755
index 0000000..c21eefe
--- /dev/null
+++ b/include/configs/platform-top.h
@@ -0,0 +1,24 @@
+#include <configs/platform-auto.h>
+#define CONFIG_SYS_BOOTM_LEN 0xF000000
+
+#define DFU_ALT_INFO_RAM \
+                "dfu_ram_info=" \
+        "setenv dfu_alt_info " \
+        "image.ub ram $netstart 0x1e00000\0" \
+        "dfu_ram=run dfu_ram_info && dfu 0 ram 0\0" \
+        "thor_ram=run dfu_ram_info && thordown 0 ram 0\0"
+
+#define DFU_ALT_INFO_MMC \
+        "dfu_mmc_info=" \
+        "set dfu_alt_info " \
+        "${kernel_image} fat 0 1\\\\;" \
+        "dfu_mmc=run dfu_mmc_info && dfu 0 mmc 0\0" \
+        "thor_mmc=run dfu_mmc_info && thordown 0 mmc 0\0"
+
+/*Required for uartless designs */
+#ifndef CONFIG_BAUDRATE
+#define CONFIG_BAUDRATE 115200
+#ifdef CONFIG_DEBUG_UART
+#undef CONFIG_DEBUG_UART
+#endif
+#endif
-- 
2.25.1

